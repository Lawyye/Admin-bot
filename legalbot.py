import logging
import os
from datetime import datetime, timezone
import sqlite3
from contextlib import asynccontextmanager
from urllib.parse import urljoin

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from fastapi import FastAPI, Request, Form
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from starlette.middleware.sessions import SessionMiddleware
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware
import redis.asyncio as redis
import uvicorn

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
load_dotenv()

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê =====
API_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
conn = sqlite3.connect('bot.db', check_same_thread=False)
conn.row_factory = sqlite3.Row

with conn:
    conn.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            phone TEXT,
            message TEXT,
            created_at TEXT,
            status TEXT DEFAULT 'new'
        )""")
    conn.execute("""
        CREATE TABLE IF NOT EXISTS documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            file_id TEXT,
            file_name TEXT,
            sent_at TEXT,
            FOREIGN KEY (request_id) REFERENCES requests(id)
        )""")

# ===== –ü–ï–†–ï–í–û–î–´ =====
translations = {
    'ru': {
        'start': 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø LegalBot. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nüá∑üá∫ –†—É—Å—Å–∫–∏–π\nüá¨üáß English',
        'canceled': '‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω',
        'thanks': '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞',
        'error_missing_data': '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        'contacts': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: +123456789',
        'menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    },
    'en': {
        'start': 'üëã Hello! I am LegalBot. Choose language:\nüá¨üáß English\nüá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'canceled': '‚ùå Request canceled',
        'thanks': '‚úÖ Thank you! Request accepted',
        'error_missing_data': '‚ö†Ô∏è Please fill all fields',
        'contacts': 'üìû Contacts: +123456789',
        'menu': 'Main menu'
    }
}

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
class RequestForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_message = State()
    attach_docs = State()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def get_lang(state: FSMContext) -> str:
    data = await state.get_data()
    return data.get('lang', 'ru')

def get_menu(lang: str) -> ReplyKeyboardMarkup:
    t = translations[lang]
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
            [KeyboardButton(t['contacts']), KeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.update_data(lang='ru')
    await message.answer(
        translations['ru']['start'],
        reply_markup=get_menu('ru')
    )

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]))
async def lang_handler(message: types.Message, state: FSMContext):
    lang = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'en'
    await state.update_data(lang=lang)
    t = translations[lang]
    await message.answer(t['menu'], reply_markup=get_menu(lang))

@dp.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def request_handler(message: types.Message, state: FSMContext):
    await state.set_state(RequestForm.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message(RequestForm.waiting_for_name)
async def name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RequestForm.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

@dp.message(RequestForm.waiting_for_phone)
async def phone_handler(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(RequestForm.waiting_for_message)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")

@dp.message(RequestForm.waiting_for_message)
async def message_handler(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    await state.set_state(RequestForm.attach_docs)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –Ω–∞–∂–º–∏—Ç–µ /done")

@dp.message(F.document, RequestForm.attach_docs)
async def doc_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    docs = data.get('docs', [])
    docs.append({
        'file_id': message.document.file_id,
        'file_name': message.document.file_name
    })
    await state.update_data(docs=docs)
    await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

@dp.message(Command("done"), RequestForm.attach_docs)
async def finish_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_lang(state)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    with conn:
        cursor = conn.execute(
            """INSERT INTO requests 
            (user_id, name, phone, message, created_at) 
            VALUES (?, ?, ?, ?, ?)""",
            (message.from_user.id, 
             data['name'], 
             data['phone'], 
             data['message_text'],
             datetime.now(timezone.utc).isoformat())
        )
        request_id = cursor.lastrowid
        
        for doc in data.get('docs', []):
            conn.execute(
                """INSERT INTO documents 
                (request_id, file_id, file_name, sent_at) 
                VALUES (?, ?, ?, ?)""",
                (request_id, doc['file_id'], doc['file_name'], 
                 datetime.now(timezone.utc).isoformat())
            )
    
    await message.answer(translations[lang]['thanks'])
    await state.clear()

# ===== FASTAPI –ù–ê–°–¢–†–û–ô–ö–ê =====
@asynccontextmanager
async def lifespan(app: FastAPI):
    await bot.delete_webhook()
    WEBHOOK_URL = urljoin(
        os.getenv('WEBHOOK_HOST', 'https://web-production-bb98.up.railway.app'), 
        '/webhook'
    )
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    yield
    await bot.delete_webhook()

app = FastAPI(lifespan=lifespan)
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# ===== CORS =====
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== –í–ï–ë–•–£–ö =====
@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"ok": False, "error": str(e)}
        )

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
app.add_middleware(SessionMiddleware, secret_key=os.getenv('SESSION_SECRET', 'secret'))

@app.get("/admin/login")
async def admin_login(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@app.post("/admin/login")
async def admin_auth(
    username: str = Form(...),
    password: str = Form(...),
    request: Request = None
):
    valid_users = {
        os.getenv('ADMIN_USER1', 'nurbol'): os.getenv('ADMIN_PASS1', 'marzhan2508'),
        os.getenv('ADMIN_USER2', 'vlad'): os.getenv('ADMIN_PASS2', 'archiboss20052024')
    }
    if username in valid_users and password == valid_users[username]:
        request.session["auth"] = True
        return RedirectResponse("/admin", status_code=302)
    return templates.TemplateResponse(
        "admin_login.html", 
        {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
        status_code=401
    )

@app.get("/admin")
async def admin_panel(request: Request):
    if not request.session.get("auth"):
        return RedirectResponse("/admin/login")
    return templates.TemplateResponse("admin.html", {"request": request})

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8080)
