import logging
import os
from datetime import datetime, timezone
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.text import Text
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.webhook import start_webhook
import redis.asyncio as redis
from fastapi import FastAPI, Request, Form, HTTPException, status
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from starlette.middleware.sessions import SessionMiddleware
from dotenv import load_dotenv
import itsdangerous

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'https://web-production-bb98.up.railway.app')
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
app = FastAPI()
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
redis_client = redis.Redis(host='redis', port=6379, db=0)

# Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
app.add_middleware(SessionMiddleware, secret_key=os.getenv('SESSION_SECRET_KEY', 'your-secret-key'))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot.db', check_same_thread=False)
conn.row_factory = sqlite3.Row

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
with conn:
    conn.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            phone TEXT,
            message TEXT,
            created_at TEXT,
            status TEXT DEFAULT 'new'
        )
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            file_id TEXT,
            file_name TEXT,
            sent_at TEXT,
            FOREIGN KEY (request_id) REFERENCES requests (id)
        )
    """)

# –ü–µ—Ä–µ–≤–æ–¥—ã
translations = {
    'ru': {
        'start': 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø LegalBot, –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:\nüá∑üá∫ –†—É—Å—Å–∫–∏–π\nüá¨üáß English',
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language',
        'canceled': '‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        'thanks': '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        'error_missing_data': '–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
        'faq_not_added': '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã" –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!',
        'contacts': 'üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +123456789\nEmail: support@legalbot.com'
    },
    'en': {
        'start': 'üëã Hello! I am LegalBot, your legal assistant. Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nüá¨üáß English\nüá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'select_lang': 'Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
        'canceled': '‚ùå Request canceled. You are back to the main menu.',
        'thanks': '‚úÖ Thank you! Your request has been accepted. We will contact you soon.',
        'error_missing_data': 'Error: not all data is filled. Please start over.',
        'faq_not_added': '‚ö†Ô∏è The "Frequently Asked Questions" feature is not yet added. Coming soon!',
        'contacts': 'üìû Our contacts:\nPhone: +123456789\nEmail: support@legalbot.com'
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RequestForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_message = State()
    attach_docs = State()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
async def get_lang(state: FSMContext, user_id: int) -> str:
    data = await state.get_data()
    if 'lang' not in data:
        lang = 'ru'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await state.update_data(lang=lang)
    else:
        lang = data['lang']
    return lang

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_menu_kb(user_id: int, lang: str) -> ReplyKeyboardMarkup:
    t = translations[lang]
    keyboard = [
        [KeyboardButton(t['faq_not_added']), KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"), KeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = 'ru'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(lang=lang)
    t = translations[lang]
    await message.answer(
        t['start'],
        reply_markup=get_menu_kb(user_id, lang)
    )

@dp.message(Text(equals=["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"], ignore_case=True))
async def set_lang(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'en'
    await state.update_data(lang=lang)
    t = translations[lang]
    await message.answer(
        t['select_lang'],
        reply_markup=get_menu_kb(user_id, lang)
    )

@dp.message(Text(equals="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", ignore_case=True))
async def start_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await state.set_state(RequestForm.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / Enter your name",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )

@dp.message(RequestForm.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await state.update_data(name=message.text)
    await state.set_state(RequestForm.waiting_for_phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω / Enter your phone",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )

@dp.message(RequestForm.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await state.update_data(phone=message.text)
    await state.set_state(RequestForm.waiting_for_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Enter your message",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )

@dp.message(RequestForm.waiting_for_message)
async def process_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await state.update_data(message_text=message.text)
    await state.set_state(RequestForm.attach_docs)
    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è / Attach documents (if any) and press /done to finish",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("/done")]], resize_keyboard=True)
    )

@dp.message(RequestForm.attach_docs, content_types=types.ContentType.DOCUMENT)
async def process_document(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    document = {
        'file_id': message.document.file_id,
        'file_name': message.document.file_name
    }
    data = await state.get_data()
    documents = data.get('documents', [])
    documents.append(document)
    await state.update_data(documents=documents)
    await message.answer(
        "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è / Document added. Attach more (if needed) or press /done to finish",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("/done")]], resize_keyboard=True)
    )

@dp.message(Command("done"), RequestForm.attach_docs)
async def done_command(message: types.Message, state: FSMContext):
    logger.info(f"Processing /done command for user {message.from_user.id}")
    await finish_request(message, state)

@dp.message(Text(equals="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", ignore_case=True), RequestForm)
async def cancel_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await state.clear()
    await message.answer(
        t['canceled'],
        reply_markup=get_menu_kb(user_id, lang)
    )

async def finish_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['name', 'phone', 'message_text']
    if not all(key in data for key in required_fields):
        await message.answer(
            t.get('error_missing_data', "–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."),
            reply_markup=get_menu_kb(user_id, lang)
        )
        await state.clear()
        return
    
    # Save to database
    with conn:
        logger.info(f"Saving request for user {user_id}: {data}")
        cursor = conn.execute(
            """INSERT INTO requests (user_id, name, phone, message, created_at, status)
               VALUES (?, ?, ?, ?, ?, ?)""",
            (
                user_id,
                data['name'],
                data['phone'],
                data['message_text'],
                datetime.now(timezone.utc).isoformat(),
                'new'
            )
        )
        request_id = cursor.lastrowid
        logger.info(f"Request saved with ID: {request_id}")
        
        # Save documents if any
        documents = data.get('documents', [])
        for doc in documents:
            conn.execute(
                """INSERT INTO documents (request_id, file_id, file_name, sent_at)
                   VALUES (?, ?, ?, ?)""",
                (request_id, doc['file_id'], doc['file_name'], datetime.now(timezone.utc).isoformat())
            )
        logger.info(f"Saved {len(documents)} documents for request {request_id}")

    # Notify admin
    if ADMIN_CHAT_ID:
        admin_text = f"""
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}

üë§ –ò–º—è: {data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message_text']}
üìÖ –î–∞—Ç–∞: {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')} (UTC)
"""
        try:
            await bot.send_message(ADMIN_CHAT_ID, admin_text)
            
            # Send documents to admin
            for doc in documents:
                await bot.send_document(
                    ADMIN_CHAT_ID,
                    doc['file_id'],
                    caption=f"–î–æ–∫—É–º–µ–Ω—Ç –∫ –∑–∞—è–≤–∫–µ #{request_id}: {doc['file_name']}"
                )
        except Exception as e:
            logger.error(f"Error sending to admin: {e}")
    
    await state.clear()
    await message.answer(
        t['thanks'],
        reply_markup=get_menu_kb(user_id, lang)
    )

@dp.message(Text(equals=["–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "FAQ"], ignore_case=True))
async def faq(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    await message.answer(
        t['faq_not_added'],
        reply_markup=get_menu_kb(user_id, lang)
    )

@dp.message(Text(equals="–ö–æ–Ω—Ç–∞–∫—Ç—ã", ignore_case=True))
async def contacts(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(state, user_id)
    t = translations[lang]
    
    contacts_text = t.get('contacts', "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +123456789\nEmail: support@legalbot.com")
    await message.answer(
        contacts_text,
        reply_markup=get_menu_kb(user_id, lang)
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@app.get("/admin/login")
async def admin_login(request: Request):
    if request.session.get("admin"):
        return RedirectResponse("/admin", status_code=302)
    return templates.TemplateResponse("admin_login.html", {"request": request})

@app.post("/admin/login")
async def admin_login_post(
    username: str = Form(...),
    password: str = Form(...),
    request: Request = None
):
    if username == os.getenv('ADMIN_USERNAME', 'admin') and password == os.getenv('ADMIN_PASSWORD', 'password'):
        request.session["admin"] = True
        return RedirectResponse("/admin", status_code=302)
    return templates.TemplateResponse("admin_login.html", {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})

@app.get("/admin/logout")
async def admin_logout(request: Request):
    request.session.clear()
    return RedirectResponse("/admin/login", status_code=302)

@app.get("/admin")
async def admin(request: Request):
    if not request.session.get("admin"):
        return RedirectResponse("/admin/login", status_code=302)
    return templates.TemplateResponse("admin.html", {"request": request})

@app.get("/admin/api/requests")
async def get_requests(request: Request):
    if not request.session.get("admin"):
        return JSONResponse({"error": "Unauthorized"}, status_code=403)
    
    logger.info("Fetching requests from database")
    rows = conn.execute("""
        SELECT r.*, GROUP_CONCAT(d.file_name) as documents
        FROM requests r
        LEFT JOIN documents d ON r.id = d.request_id
        GROUP BY r.id
        ORDER BY r.created_at DESC
    """).fetchall()
    logger.info(f"Found {len(rows)} rows in database")
    
    requests = []
    for row in rows:
        requests.append({
            'id': row['id'],
            'user_id': row['user_id'],
            'name': row['name'],
            'phone': row['phone'],
            'message': row['message'],
            'created_at': row['created_at'],
            'status': row['status'],
            'documents': row['documents'].split(',') if row['documents'] else []
        })
    
    logger.info(f"Returning {len(requests)} requests")
    return {"requests": requests}

# Webhook
async def on_startup(_):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(_):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host='0.0.0.0',
        port=8080,
)
